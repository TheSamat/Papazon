рус - eng:

Фреймворк
Язык программирования
CRL (общеязыковая среда выполнения / Common Language Runtime)
COM
ORM	
среда выполнения
архитектуры

компилятор
компиляция
сборка(assambly)
отладка
компоненты(файлы)
типы(классы, структуры...)
исходный код
управляемые модули
управляемые сборки
верификации кода
сериализация полей обьекта

структура
тип 
обьект
экземпляр
класс
сигнатура
модификаторы
события
семантика

хеш-код
фактический тип
поверхностное (поразрядное) копирование
глубокое копирование
директива

обект-тип
индекс блока синхронизации
разыменовывание (dereference)
значимые и ссылочные типы
упаковка
распаковка
конкатенация
(не)витруально

динамический тип

индексаторы класса
делигаты

унарные/бинарные методы

отражение
рефлекия
сериализация

inline - подставлять на месте (во время выполнения)
специализация типа
верифицируемый код

загрузка (сборки/типа)
выгрузка (сборки/типа)

метод обратного вызова
преобразование/приведение типов
методы расширения ()
частичные методы

раннее и позднее связывание
необязательное и именованные параметры
свойства без параметров

анонимные типы
кортежный тип
System.Tuple
неименуемый тип (свойства только для чтения)
свойства без параметров (parameterless properties)
индиксаторы - свойства с параметрами

событие
делегат (delegate)
методы обратного вызова (callback methods)

реестр
регистр
ObjRef
ReferenceType

Маршаллинг

Тривиальный тип
запечатанный тип
запечатанный метод

Кортежный тип
Теконструктор (не путать с деконструктром!)





Объект-тип - это указатель на тип объекта. Он недоступен программисту напрямую без всяческих колдунств, поскольку предназначен для самой CLR
Индекс блока синхронизации предназначен для целого ряда целей. Но основная его задача - это обеспечение работы объекта в условиях многопоточности. В случаях многопоточности CLR создает структуру блок-синхронизации, в которую и заключают все индексы. А так, у всех них он равен -1 и нигде не используется. Кроме того индекс блока синхронизации может использоваться в качестве хэш-кода этого объекта в случае, если механизм генерации хэш-кода не был переопределен
Рефлексия (reflection, отражение) - способность программы понимать как именно она была написана. Как называются объекты, какого они типа, какие поля у них есть и сколько их, приватные они или публичные и т.д. Все это хранится в каком-то месте собранной программы и имеется логика, позволяющая эту информацию запрашивать.
Сериализация - это процесс сохранения состояния объекта в последовательность байт; десериализация это процесс восстановления объекта, из этих байт.
Верифицируемый код - это код, для которого верификатор может доказать, что он не разрушает память. Другими словами, для верифицируемого кода можно заранее, еще до запуска верификатора, сказать, что он успешно пройдет верификацию (такой код может генерироваться компилятором C#) 


Маршаллинг - это передача сущности из одного контекста в другой. Сериализация - это запись в виде последовательности элементов.

Маршаллинг - это процесс более высокого уровня, чем сериализация. Обычно, если надо передать структуру данных из одного процесса 
в другой - ее сериализуют, передают и десериализуют. Если параметр двусторонний - то и передавать его надо будет два раза, 
при этом это будет одна операция маршаллинга.

Или возможна передача по ссылке, когда на другой стороне канала создается прокси-объект, а через канал передается не 
внутреннее состояние объекта, а вызовы его методов.

Если речь идет о взаимодействии между управляемым и неуправляемым кодом - то маршаллинг заключается в фиксировании адресов объектов
или в копировании структур между управляемой и неуправляемой памятью, сериализация тут вовсе не используется.

Деконструктор (не путать с деконструктром!) - операция, позволяющая разбить составной обьект на части (выполняет декомпозицию)
Деструктор (не путать с Деконструкторами) - метод деинициализации любых обьектов. В C# вызывается только CLR в рамках сборки мусора