Ранее весь код писался одной компанией без ООП составляющих - компонентов. Но при этом композиция была, а прямое разделение
по компонентам, управляемые версиями, постовляющимися разными компаниями или их частями еще реализовано не было. Но для упрощения, 
ускорения разработки, управлениями версиями реализовали компонентную разработку (Component Softwere Programming - CSP) 
на идеях ООП на уровне компонентов. (в .NET компонентами зовутся сборки)

Вот несколько их свойств:
	1) Компонент (сборка в .NET) можно публиковать
	2) Компоненты уникальны и идентифицируются по имени, версии, региональным стандартам и открытому ключу.
	3) Компонент созраняет свою уникальность (код одной сборки никогда не связывается с другой статически - в .NET только динамически)
	4) В компоненте всегда четко указана зависимость от других компонентов (в виде ссылочных таблиц в методанных)
	5) В компоненте документированы его классы и члены. В с# даже разрешается включать в код компонента его XML документацию
	6) В компоненте определяются требуемые разрешения на доступ. В CLR для этого есть механизм защиты доступа к коду 
	   (Code Access Security, CAS)
	7) Опубликованный компонентом интерфейс (обьектная модель) не изменяется во всех его служебных версиях. Служебная версия 
	   (servicing) - новая версия компонента, обратно совместимой с оригинальной. Она обычно содержит исправления ошибок, 
	   исправления системы безопасности, а также небольшие корректировки в функционале. Но в нее нельзя добавлять новые зависимости 
	   или разрешения безопасности.

Компоненты жестко управляются версиями (7 пункт). 

.NET версии компонента выделяют 4 номерных части:
	1) major (основной)
	2) minor (дополнительный)
	3) build (построения/компонирования)
	4) revision (радакции)

Но CLR работает не как C#, посему указанная в зависимостях версия и будет подгружаться, если не прописан механизм перенаправления 
связывания, что укажет какую версию необходимо подгружать.

Но при определении в качестве базовых типов компоненты могут случаться казусы, а так же есть ключевые слова, которые имеют влияние на это:

Модификатор		Для типа:							Методы/свойства/события 
abstract		Нельзя создавать экземпляров		Обязательно переопределять и реализовывать. Только для abstract типов
virtual			(запрещено)							Можно переопределять в производном.
override		(запрещено)							Переопределяется, в его отсутствии используется базовая.
sealed			От типа нельзя наследоваться.		Нельзя переопределить. Только для override типов.
new				Его примение к вложенному типу, методу, свойству, событию "отрекает" их от базового.
...													Нельзя переопределить в производном типе. 