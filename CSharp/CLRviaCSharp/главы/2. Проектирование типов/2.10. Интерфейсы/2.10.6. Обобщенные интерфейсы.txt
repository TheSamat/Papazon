Обобщения определенно нужны, особенно интерфейсам, ибо через них можно использовать множество типов в для различного функционала. Но 
необобщеные интерфейсы, использующие Object - нежелательны. IComparable использует как раз таки "обобщения" через Object, а
IComparable<T> же - обобщение типов. Это позволит использовать все преимущества обобщений:
	1) поддержка множества типов			|	Object позволяет
	2) безопасность типов					|	Object не может
	3) отсутствие упаковки значимых типов	|	Object не может

Заметка: многие обобщенные интерфейсы наследуют необобщенные интерфейсы^ IComparable<T> наследует IComparable, IEnumerable<T> - IEnumerable.

Иногда, при необходимости интеграции с другим кодом, приходится реализовывать
необобщенный интерфейс просто потому, что необобщенной версии не существует.
В этом случае, если любой из интерфейсных методов принимает или возвращает
тип Object, теряется безопасность типов при компиляции, и значимые типы должны
упаковываться. Можно в некоторой степени исправить эту ситуацию, действуя так,
как описано далее в разделе «Совершенствование безопасности типов за счет явной
реализации интерфейсных методов»