Каждая переменная имеет тип, имя и значение/литерал

Каждый тип наследник System.Object, наследование в C# не множественное. 

Все типы делятся на значимые и ссылочные. Они имееют 
разный функционал, средой воспринимаются по разному. Каждый ссылочный тип - по сути класс, а делегаты/интерфейсы - просто его 
разновидности. Значимые типы содержат либо значения, либо ссылку на свое упакованное значение.

Значимые типы наследуются от 2 классов:


new - создание экземпляра (обьекта) класса.

Каждый тип может приводиться к потомку (DownCast) неявно и без потерь данных, а наоборот (UpCast) - только явно с возможной потерей 
данных. Передавача значения одного экземпляра типа к другому экземпляру этого же типа идет без приведения, а во всех остальных случаях
придется создавать логику поведения конвертирования типов (Convert методы). Для приведений есть 2 специализированых оператора: is и as.

Все приведения ссылочных типов происходят копированием ссылки, изменением формального типа и сокрытием производных членов типа обьекта,
обеспечивая сокрытие.

Для работы необходимы пространства имен. Так разделяется именование абстракций при работе, позволяя разделять код. При обнаружении 
однофамильцев, необходимо использовать полное имя сущности, либо определить псевдоним. При пространствах имен однофамильцев, необходимо
использовать внешние псевдонимы (extern aliases). Внешние псевдонимы дают также возможность обращаться к одному типу двух (или более) 
версий одной сборки.

При запуске приложения, CLR занимается скрытыми от разработчика вопросами абстракции ниже стоящих уровней: 
хранением и структурированием типов на физическом уровне, работой методанных и тому подобным.