Обобщения, как проявление парадигмов языка описывают скорее не параматрический полиморфизм, а повторение кода. 

Обобщенными могут быть как ссылочные, так и значимые типы, КРОМЕ перечислений. Из ссылочных так же и интерфейсы с делегатами.
Так же это распростроняется на методы и на все выражения, требующие переменных.

Механизм обобщений работает с парметрами типа: при компиляции тип параметра не известен, (хоть и может иметь ограничения) и
во время работы его фактический во время работы тип подставится в контекст, а как это будет сделано - тонкости языка. 
В синтаксисе наименования подобных параметров, обычно ставится или начинается на Т (от Type). 

При работе, когда подставляются фактический тип, его называют аргументом типа.

Преимуществами обобщений являются:
	1)	Защита исходного кода. При работе с обобщенными алгоритмами не нужен доспут к исходному коду.
	2)	Безопасность типов. Работая с фактическим типом, работа будет осуществляться непосредственно с ним, 
		без преобразований и подстановок.
	3)	Упрощение кода. Нет надобности в перегрузке, код более читаем, легче разрабатывается и поддерживается
	4)	Повышение производительности. Особенно в значении значимых типов в виде отсутствия упаковки. Нет преобразований. 
		Так же обобщенные коллекции содержат меньше виртуальных методов.

Но обобщение не панацея и своих минусов тоже имеет:
	1)	Разрастание кода. Из-за создания фактического типа для каждого обобщения типа, генерируюется большое число типов,
		что отрицательно сказывается на производительности всего приложения.

Обобщения незаменимы в коллекциях, которые занимают пространства имен:
	i.	 System.Collections.Generic		// чаще всего используемые коллекции
	ii.	 System.Collections.ObjectModel	// уникальные обобщенные коллекций
	iii. System.Collections.Concurrent	// потокобезопасные коллекции (отдают производительность в обмен на потокобезопасность)

Совет Рихтера: "используйте обобщения, если есть выбор между необобщенным и обобщенным". К доп. плюсам можно отнести
расширенный функционал обобщенных типов.

Интерфейсы тоже имеют огромную роль в обобщениях. С помощью них у типов появляются куча возможностей для реализации.

Работая с обобщениями вместо конкретного типа указывается параметр типа (type parameters), который лучше именовывать 
либо как <Т>, либо начинать на <T...>. Используя реализованные обобщенния, в параметры типа передается конкретные типы, 
называемые аргументами-типами (type arguments).