public class Object {
  public virtual Boolean Equals(Object obj) {
    // Если обе ссылки указывают на один и тот же объект,
    // значит, эти объекты равны
    if (this == obj) return true;
    // Предполагаем, что объекты не равны
    return false;
  }
} 

В базовам классе Object сравнивают два обьекта методом Equals(), в котором просто сравниваются ссылки и при их различии 
вне зависимости от их типов возвращает false. Это больше тождество("одинаковость"), чем их "равенство", поэтому 
необходимо переопределять этот метод для новых типов, удовлетвояющий следующие условия:

1) При аргументе obj, равном null, вернуть false. Сравнение должно быть с действительным обьектом.
2) Если obj и this равны, вернуть true, ибо тождество есть равенство.
3) Если obj и this ссылаются на разные типы, вернуть false, ибо 2 типа не имеет смысла сравнивать, если необходимо - перегрузить метод.
4) Сравнить несколько-все поля, при их равенстве вернуть true.
5) По желанию еще вызвать дополнительно Equals базовых типов.

И следующие 4 характеристики:
    Рефлексивность: x.Equals(x) должно возвращать true.
    Симметричность: x.Equals(y) и y.Equals(x) должны возвращать одно и то же значение.
    Транзитивность: если x.Equals(y) возвращает true и y.Equal (z) возвращает true, то x.Equals(z) также должно возвращать true.
    Постоянство: если в двух сравниваемых значениях не произошло изменений, результат сравнения тоже не должен измениться. 

По желанию еще можно:
    1) Реализовать в типе метод Equals интерфейса System.IEquatable<T>.
    2) Перегрузить методы операторов == и !=.