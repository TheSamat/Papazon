В качестве Beackend будет использоваться WebApi на C# с использованием .Net 7, Core, Entity Framework и PostgresSQL для БД. 
	.Net 7		-	для оптимального внедрения стека технологий в проект
	.Net Core	-	для кросплотформенности
	EF			-	для абстрогирования/независимости от БД
	PostgreSQL	-	для оптимального использования базы данных

Приложение разбито на 4 слоя, внешние ссылаются на внутренние в своем естестве, но никак не наоборот:
1.  Core  
	1.1.  Domain  
	1.2.  Application ->  Core.Domain  
2.  Infrastructure  
	2.1.  Persistence ->  Core.Application  
3.  Presentation  
	3.1.  WebApi  
4.  Test  
  
Test -> Presentation  ->  Infrastructure  ->  Core  

*	Core			- Ядро, внутренний слой, содержащий enterprise и бизнесс логику, а так же представляющие их типы 
	*	Domain			- Подслой, содержащий  enterprise логику и типы. Может использоваться для других проектов  
	*	Application		- Подслой, содержащий  бизнесс логику и типы. Используется для конкретно этого проекта  
*	Infrastructure  - 2ой слой, содержащий логику обращения к бд  
	*	Persistence		- изолированная логика чтения/записи/удаления записей на базу данных.  
*	Presentation	- 3ий слой, содержащий логику представления самого приложения. В нашем - wep api  
	*	WebApi			- функционал приложения  
*	Test			- вшешний слой, отвечающий за анализ целостности слоёв 

В качестве введения бд из 3 возможных подходов:
	1.	Database First	-	для сведующих в БД, в ситуации наличии готового БД
	2.	Model First		-	для проектировщиков для облегчения работы
	3.	Code First		-	для программистов, плохо сведующих в проектировании проектов и тонкостях БД
используется последний из-за отсутствия опыта в других областях.